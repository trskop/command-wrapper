-- vim: filetype=dhall
--
-- Convert output of `TOOLSET exec --print COMMAND` into command that can be
-- executed on command line.
--
-- This script can be used in multiple ways, here are some of them:
--
-- ```
-- "${TOOLSET_COMMAND}" exec --print "${COMMAND}" > command.dhall
-- "${TOOLSET_COMMAND}" config --dhall-text <<< './to-shell ./command.dhall'
-- ```
--
-- ```
-- export EXEC_COMMAND="$("${TOOLSET_COMMAND}" exec --print "${COMMAND}")"
-- "${TOOLSET_COMMAND}" config --dhall-text <<< './to-shell env:EXEC_COMMAND'
-- ```
--
-- ```
-- "${TOOLSET_COMMAND}" exec --print "${COMMAND}" \
-- | "${TOOLSET_COMMAND}" config --dhall-filter './to-shell input' \
-- | "${TOOLSET_COMMAND}" config --dhall-text
-- ```

let ExecCommand =
      { Type =
            ../../CommandWrapper/ExecCommand/Type sha256:6ece797a2c269b469da41f12ec2d7206846cac65183ae8213cce1b6d59f2b02b
          ? ../../CommandWrapper/ExecCommand/Type
      , default =
            ../../CommandWrapper/ExecCommand/default sha256:c3a088ca2b090c91d5d630c4e01f4b4fbd0136f5bb1251f6828698e5180685b2
          ? ../../CommandWrapper/ExecCommand/default
      }

let EnvironmentVariable =
        ../../CommandWrapper/EnvironmentVariable/Type sha256:b8c3c0c4ceb36ba4e6674df5de20ad1d97e120b93b9ce9914a41d0036770dcc4
      ? ../../CommandWrapper/EnvironmentVariable/Type

let EnvironmentVariable/toText =
        ../../CommandWrapper/EnvironmentVariable/toText sha256:14b6ceff46e7ec8cd1846d2f50ba366efb3e623f6d92e7543aabaab1ac265f34
      ? ../../CommandWrapper/EnvironmentVariable/toText

let List/map =
      https://prelude.dhall-lang.org/v12.0.0/List/map sha256:dd845ffb4568d40327f2a817eb42d1c6138b929ca758d50bc33112ef3c885680

let Text/concatMapSep =
      https://prelude.dhall-lang.org/v12.0.0/Text/concatMapSep sha256:c272aca80a607bc5963d1fcb38819e7e0d3e72ac4d02b1183b1afb6a91340840

let Text/concatSep =
      https://prelude.dhall-lang.org/v12.0.0/Text/concatSep sha256:e4401d69918c61b92a4c0288f7d60a6560ca99726138ed8ebc58dca2cd205e58

let -- Alternative would be to use `env --chdir=${dir}` instead, but how
    -- portable is it?
    withWorkingDirectory =
        λ(dir : Optional Text)
      → λ(cmd : Text)
      → Optional/fold
          Text
          dir
          Text
          (λ(_ : Text) → "( cd ${Text/show _} && ${cmd} )")
          cmd

let toShell =
        λ(cmd : ExecCommand.Type)
      →     withWorkingDirectory
              cmd.workingDirectory
              (     "env "
                ++  Text/concatMapSep
                      " "
                      Text
                      Text/show
                      (   List/map
                            EnvironmentVariable
                            Text
                            EnvironmentVariable/toText
                            cmd.environment
                        # [ cmd.command ]
                        # cmd.arguments
                      )
              )
        ++  "\n"

let example0 =
        assert
      :   toShell
            ExecCommand::{
            , command = "echo"
            , arguments = [ "Hello", "World" ]
            , environment = [ { name = "FOO", value = "BAR" } ]
            }
        ≡ ''
          env "FOO=BAR" "echo" "Hello" "World"
          ''

let example1 =
        assert
      :   toShell
            ExecCommand::{
            , command = "echo"
            , arguments = [ "Hello", "World" ]
            , environment = [ { name = "FOO", value = "BAR" } ]
            , workingDirectory = Some "/a/directory"
            }
        ≡ ''
          ( cd "/a/directory" && env "FOO=BAR" "echo" "Hello" "World" )
          ''

in  toShell
