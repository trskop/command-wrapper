-- vim: filetype=dhall

let Action =
        ./Type sha256:8df4bf8c0bcc06dae0cc7235ab731ddf210b072ea8ece9ff96b8abc5d138f36b
      ? ./Type

let Action/toArguments =
        λ(action : Action)
      → merge
          { Remote =
                λ ( opts
                  : { openInTab : Bool
                    , wait : Bool
                    , silent : Bool
                    , files : List Text
                    }
                  )
              →   [     "--remote"
                    ++  (if opts.openInTab then "-tab" else "")
                    ++  (if opts.wait then "-wait" else "")
                    ++  (if opts.silent then "-silent" else "")
                  ]
                # opts.files
          , RemoteSendKeys = λ(keys : Text) → [ "--remote-send", keys ]
          , RemoteExpression =
              λ(expression : Text) → [ "--remote-expr", expression ]
          , Split =
                λ(opts : { vertical : Bool, files : List Text })
              → [ if opts.vertical then "-O" else "-o" ] # opts.files
          , TabEdit = λ(files : List Text) → [ "-p" ] # files
          , JumpToTag = λ(tag : Text) → [ "-t", tag ]
          , ReadErrorFile = λ(file : Text) → [ "-q", file ]
          }
          action

let test0 =
        assert
      :   Action/toArguments
            ( Action.Remote
                { openInTab = False
                , wait = True
                , silent = False
                , files = [ "./foo" ]
                }
            )
        ≡ [ "--remote-wait", "./foo" ]

let test1 =
        assert
      :   Action/toArguments
            ( Action.Remote
                { openInTab = True
                , wait = True
                , silent = True
                , files = [ "./foo", "./bar" ]
                }
            )
        ≡ [ "--remote-tab-wait-silent", "./foo", "./bar" ]

let test2 =
        assert
      :   Action/toArguments
            (Action.Split { vertical = True, files = [ "./foo", "./bar" ] })
        ≡ [ "-O", "./foo", "./bar" ]

in  Action/toArguments
