# Usage example:
#
# ```Nix
# { pkgs ? import <nixpkgs> { } }:
#
# let command-wrapper = pkgs.callPackage ./nix/command-wrapper { };
#
# in pkgs.callPackage ./nix/command-wrapper-toolset {
#   toolset = "yx";
#   inherit command-wrapper;
# }
# ```

{ stdenv, fetchurl, makeWrapper, lib, command-wrapper, toolset
, toolsetVersion ? "1.0.0", subcommands ? [ ] }:

let
  version = toolsetVersion;

  toolsetSubcommands = map (pkg:
    pkg {
      name = toolset;
      manpage = toolset;
      inherit version;
    }) subcommands;

  toList = subDir: paths:
    if paths == [ ] then
      "[ ] : List Text"
    else
      ''[ "'' + (lib.concatStringsSep ''", "''
        (builtins.map (path: path + "/" + subDir)
          (builtins.filter (x: x != null) paths))) + ''" ] : List Text'';

  defaultConfig = paths: ''
    global // {
    , searchPath = global.searchPath # (${toList "libexec/${toolset}" paths})
    , manPath = [ "''${out}/share/man" ] # (${toList "share/man" paths})
    }
  '';

  pandoc = stdenv.mkDerivation rec {
    name = "pandoc";

    src = fetchurl {
      url = let
        repoUrl = "https://github.com/jgm/pandoc";
        version = "2.9.2";
        suffix = if stdenv.isLinux then "linux-amd64.tar.gz" else "macOS.zip";
      in "${repoUrl}/releases/download/${version}/pandoc-${version}-${suffix}";

      sha256 = if stdenv.isLinux then
        "022x364571xl2cy7pzybjmvyp6ds5nphdjwv8xlf5hb6c5dib7q3"
      else
        "17gr50kyzx663qy4y38zsjxcfi8jz81h76x5awglz8w0snx7c0al";
    };

    dontConfigure = true;
    dontBuild = true;
    dontStrip = true;
    dontPatchELF = true;
    noAuditTmpdir = true;

    installPhase = ''
      mkdir -p "$out/bin"
      install --mode=555 --target-directory="$out/bin" \
        bin/pandoc \
        bin/pandoc-citeproc
    '';
  };

in stdenv.mkDerivation rec {
  name = "command-wrapper-toolset-${toolset}-${version}";
  inherit version;

  src = ./.;

  mkEnvironmentVariablesDhall = builtins.readFile ./environment-variables.dhall;
  toolsetEnvPrefix = lib.replaceStrings ["-"] ["_"] (lib.toUpper toolset);

  dontConfigure = true;
  dontBuild = true;
  dontStrip = true;
  dontPatchELF = true;
  noAuditTmpdir = true;

  buildInputs = [ command-wrapper makeWrapper pandoc ] ++ toolsetSubcommands;

  installPhase = ''
    declare -r -a directories=(
      "$out/bin"
      "$out/etc/command-wrapper"
      "$out/libexec/command-wrapper"
      # "$out/libexec/${toolset}"
      # "$out/etc/${toolset}"
      "$out/share/man/man1"
    )
    mkdir -p "''${directories[@]}"

    declare -r commandWrapper="${command-wrapper}/libexec/command-wrapper/command-wrapper"
    declare -r commandWrapperConfigDir="${command-wrapper}/etc/command-wrapper"

    # Since system-wide configuration is generated by this derivation we need
    # to pass correct COMMAND_WRAPPER_SYSTEM_CONFIG_DIR to the underlying
    # 'command-wrapper' executable. For that reason we use "facade".  An
    # alternative executable to the underlying 'command-wrapper' executable
    # that is used instead.  For more information see 'command-wrapper(1)'.
    declare -r facade="''${out}/libexec/command-wrapper/command-wrapper"

    makeWrapper "''${commandWrapper}" \
      "''${facade}" \
      --set TERMINFO_DIRS "/etc/terminfo:/lib/terminfo:/usr/share/terminfo" \
      --set COMMAND_WRAPPER_SYSTEM_CONFIG_DIR "$out/etc" \
      --set COMMAND_WRAPPER_FACADE "''${facade}"

    # This could have been built on top of facade instead of original
    # 'command-wrapper' binary, but that way we would have one extra exec*()
    # call.
    makeWrapper "''${commandWrapper}" \
      "$out/bin/${toolset}" \
      --argv0 "${toolset}" \
      --set TERMINFO_DIRS "/etc/terminfo:/lib/terminfo:/usr/share/terminfo" \
      --set COMMAND_WRAPPER_SYSTEM_CONFIG_DIR "$out/etc" \
      --set COMMAND_WRAPPER_FACADE "''${facade}"

    {
      "''${commandWrapper}" config --dhall \
        --let='toolset="${toolset}"' \
        --let='TOOLSET="${toolsetEnvPrefix}"' \
        --let="out=\"$out\"" \
        <<'EOF'
    ${mkEnvironmentVariablesDhall}
    EOF
    } \
    | "''${commandWrapper}" config --dhall-text \
      --output='./environment-variables.dhall.temp'
    "''${commandWrapper}" config --dhall \
      --let="CommandWrapper=''${commandWrapperConfigDir}/lib/CommandWrapper/package.dhall" \
      --let="Prelude=''${commandWrapperConfigDir}/lib/Prelude/package.dhall" \
      --let="Global=''${commandWrapperConfigDir}/environment-variables.dhall" \
      --output="$out/etc/command-wrapper/environment-variables.dhall" \
      < './environment-variables.dhall.temp'

    source <(
      "''${commandWrapper}" config --dhall-bash --declare=environmentVariables \
      <<< "($out/etc/command-wrapper/environment-variables.dhall)::{=}"
    )
    declare -r -A completions=(
      [bash]="''${environmentVariables["${toolsetEnvPrefix}_BASH_COMPLETION"]}"
      [fish]="''${environmentVariables["${toolsetEnvPrefix}_FISH_COMPLETION"]}"
      [zsh]="''${environmentVariables["${toolsetEnvPrefix}_ZSH_COMPLETION"]}"
    )

    for shell in "''${!completions[@]}"; do
      completionFile="''${completions[''${shell}]}"
      completionDir="$(dirname "''${completionFile}")"
      mkdir -p "''${completionDir}"
      "''${commandWrapper}" \
        completion --script --shell="''${shell}" \
        --toolset="${toolset}" \
        --executable="''${facade}" \
        --output="''${completionFile}"
    done

    mkdir -p "$out/etc/command-wrapper/default"
    "''${commandWrapper}" config --dhall \
      --let="CommandWrapper=''${commandWrapperConfigDir}/lib/CommandWrapper/package.dhall" \
      --let="Prelude=''${commandWrapperConfigDir}/lib/Prelude/package.dhall" \
      --let="global=''${commandWrapperConfigDir}/default.dhall" \
      --let="out=\"$out\"" \
      --output="$out/etc/command-wrapper/default/constructor.dhall" <<'EOF'
    ${defaultConfig toolsetSubcommands}
    EOF
    "''${commandWrapper}" config --dhall-freeze \
      --no-remote-only --for-security \
      --expression="$out/etc/command-wrapper/default/constructor.dhall" \
      --output="$out/etc/command-wrapper/default.dhall"

    if [[ -f ./man/toolset.1.md.dhall ]]; then
      "''${commandWrapper}" config --dhall \
        --let="CommandWrapper=''${commandWrapperConfigDir}/lib/CommandWrapper/package.dhall" \
        --let="Prelude=''${commandWrapperConfigDir}/lib/Prelude/package.dhall" \
        --let="toolset=
          { upper = \"${lib.toUpper toolset}\"
          , name = \"${
            lib.toUpper (builtins.substring 0 1 toolset)
            + builtins.substring 1 (builtins.stringLength toolset) toolset
          }\"
          , command = \"${toolset}\"
          , version = \"${version}\"
          }" \
        --let="out=\"$out\"" \
        --let="T=./man/toolset.1.md.dhall" \
        --expression="T.template T.Options::{ toolset }" \
      | "''${commandWrapper}" config --dhall-text --output=./man/toolset.1.md
    fi

    if [[ -f ./man/toolset.1.md ]]; then
      pandoc --standalone --to=man \
        --output="$out/share/man/man1/${toolset}.1" \
        ./man/toolset.1.md
    fi
  '';
}
