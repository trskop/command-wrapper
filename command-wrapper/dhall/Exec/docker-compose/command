-- vim: filetype=dhall
--
-- ```
-- docker-compose GLOBAL_OPTIONS [ACTION] [ARGUMENTS]
-- ```
--
-- TODO:
-- * Verbosity should be respected by passing appropriate `--log-leve=LEVEL`.

let ExecCommand =
      { Type =
            ../../CommandWrapper/ExecCommand/Type sha256:6ece797a2c269b469da41f12ec2d7206846cac65183ae8213cce1b6d59f2b02b
          ? ../../CommandWrapper/ExecCommand/Type
      , default =
            ../../CommandWrapper/ExecCommand/default sha256:c3a088ca2b090c91d5d630c4e01f4b4fbd0136f5bb1251f6828698e5180685b2
          ? ../../CommandWrapper/ExecCommand/default
      }

let ColourOutput =
        ../../CommandWrapper/ColourOutput/Type sha256:0ef91a3f044406ee80fc20f26127b448a0e98f46c46ec024457023d2aded8543
      ? ../../CommandWrapper/ColourOutput/Type

let Verbosity =
        ../../CommandWrapper/Verbosity/Type sha256:f009a39a49b1ee65651e9510778e7d72ff96820f4702a955e8f47682d72995c6
      ? ../../CommandWrapper/Verbosity/Type

let emptyArguments = [] : List Text

let Action =
        ./Action/Type sha256:e88f3cc3042912a2d9a24b75f93865227edbf368a70f5a8bb10f137abc8063c2
      ? ./Action/Type

let Action/toArguments =
        ./Action/toArguments sha256:2a3a9916f76a8cb19fec302d836f00f0cabc503206fbcaeef99b55082cfaa8f0
      ? ./Action/toArguments

let GlobalOptions =
        ./GlobalOptions/Type sha256:82c559b2efa14b05efa1644a6ac53852c45823fd1395f1aa223fd8f9aa549b5c
      ? ./GlobalOptions/Type

let GlobalOptions/toArguments =
        ./GlobalOptions/toArguments sha256:902d7feef94fbc8bc2346e7ddbe21cdb3694421b555c4152ca8fc049917fe6ce
      ? ./GlobalOptions/toArguments

in  λ(options : GlobalOptions) →
    λ(action : Optional (ColourOutput → Action)) →
    λ(_ : Verbosity) →
    λ(colourOutput : ColourOutput) →
    λ(arguments : List Text) →
      ExecCommand::{
      , command = "docker-compose"
      , arguments =
            GlobalOptions/toArguments options
          # merge
              { None = emptyArguments
              , Some =
                  λ(mkAction : ColourOutput → Action) →
                    Action/toArguments (mkAction colourOutput)
              }
              action
          # arguments
      , environment = options.environment
      , workingDirectory = options.workingDirectory
      }
